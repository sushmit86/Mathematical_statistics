View(Hitters)
predict.regsubsets = function(object, newdata, id,...){
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id =id)
xvars = names(coefi)
mat[,xvars]%*%coefi
}
regfit.best = regsubsets(Salary~., data = Hitters, nvmax = 19)
coef(regfit.best, 10)
k =10
set.seed(1)
folds = sample(1:k, nrow(Hitters), replace = TRUE)
cv.errors = matrix(NA, k,19, dimnames = list(NULL,paste(1:19)))
for (j in 1:k){
best.fit = regsubsets(Salary ~., data = Hitters[folds!= j, ], nvmax = 19 )
for( i in 1:19){
pred = predict(best.fit, Hitters[folds == j,],id = i)
cv.errors[j,i] = mean((Hitters$Salary[folds ==j] - pred)^2)
}
}
mean.cv.errors = apply(cv.errors,2,mean)
mean.cv.errors
par(mfrow = c(1,1))
plot(mean.cv.errors,type = 'b')
reg.best = regsubsets(Salary ~., data = Hitters, nvmax = 19)
coef(reg.best,11)
x = model.matrix(Salary~., Hitters)[,-1]
y = Hitters$Salary
# Ridge regression
grid = 10^ seq(10,-2, length = 100)
ridge.mod = glmnet(x,y ,alpha = 0, lambda = grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod)[,50]
ridge.mod$lambda[60]
coef(ridge.mod)[,60]
predict(ridge.mod, s= 50, type ="coefficients")[1:20]
set.seed(1)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
y.test = y[test]
ridge.mod = glmnet( x[train, ], y[train] , alpha = 0, lambda = grid, thresh = 1e-12)
ridge.pred = predict(ridge.mod, s = 4 , newx = x[test, ])
mean((ridge.pred - y.test)^2)
mean((mean(y[train]) - y.test)^2)
ridge.pred = predict(ridge.mod, s = 1e10, newx = x[test, ])
mean((ridge.pred - y.test)^2)
ridge.pred = predict(ridge.mod,s =0,newx = x[test,], exact = T)
mean((ridge.pred - y.test)^2)
lm(y ~x , subset = train)
predict(ridge.mod, s= 0,exact = T, type ="coefficients")[1:20, ]
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha = 0)
plot(cv.out)
plot(cv.out)
plot(cv.out)
plot(cv.out)
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha =0 )
bestlam = cv.out$lambda.min
print(bestlam)
ridge.pred = predict(ridge.mod, s= bestlam, newx = x[test, ])
mean((ridge.pred - y.test)^2)
out = glmnet(x,y alpha = 0)
out = glmnet(x,y ,alpha = 0)
predict(out, type= "coefficients", s= bestlam)[1:20,]
lasso.mod = glmnet(x[train,],y[train], alpha = 1)
lasso.mod = glmnet( x[train,], y[train], alpha = 1, lambda = grid)
plot(lasso.mod)
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha = 1)
plot(cv.out)
bestlam = cv.out$lambda.min
lasso.mod = glmnet(x[train,],y[train], alpha = 1)
source('~/Personal/Stat_learning/Chater6_lab.R', echo=TRUE)
plot(lasso.mod)
set.seed(1)
cv.out = cv.glmnet(x[train,], y[train], alpha = 1)
plot(cv.out)
bestlam = cv.out$lambda.min
source('~/Personal/Stat_learning/Chater6_lab.R', echo=TRUE)
mean((lasso.pred - y.test)^2)
out = glmnet(x,y, alpha = 1, lambda = grid)
source('~/Personal/Stat_learning/Chater6_lab.R', echo=TRUE)
lasso.coef
source('~/Personal/Stat_learning/Chater6_lab.R', echo=TRUE)
install.packages("pls")
library(pls)
library(pls)
set.seed(1)
pls.fit = plsr(Salary~., data = Hitters, subset = train, scale= TRUE, validation = "CV")
summary(pls.fit)
source('~/Personal/Stat_learning/Chater6_lab.R', echo=TRUE)
pcr.fit = pcr(Salary ~., data = Hitters, scale= TRUE, validation = "CV")
summary(pcr.fit)
validationplot(pcr.fit,val.type = "MSEP")
set.seed(1)
pcr.fit = pcr(Salary~., data = Hitters, subset = train, scale = TRUE, validation = "CV")
pcr.fit = pcr(Salary~., data = Hitters, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP")
pcr.pred = predict(pcr.fit, x[test,], ncomp = 7)
mean((pcr.pred - y.test)^2)
pcr.fit = pcr( y ~ x , scale= TRUE, ncomp = 7)
summary(pcr.fit)
set.seed(1)
pls.fit = plsr( Salary ~., data = Hitters, subset = train, scale = TRUE,
validation = "CV")
summary(pls.fit)
validationplot(pls.fit, val.type = "MSEP")
mean((pls.pred - y.test)^2)
pls.pred = predict(pls.fit, x[test,] ,ncomp = 2)
mean((pls.pred - y.test)^2)
pls.fit = plsr(Salary ~., data = Hitters, scale = TRUE,ncomp = 2)
install.packages('TSA')
library(ISLR)
library(leaps)
attach(Hitters)
library(glmnet)
library(pls)
names(Hitters)
library(TSA)
data(larain)
plot(larain,ylab='Inches',xlab='Year',type='o')
win.graph(width=4.875, height=2.5,pointsize=8)
data(larain)
plot(larain,ylab='Inches',xlab='Year',type='o')
data(oilfilters)
data(winnebago)
spruce = read.csv("Data/Spruce.csv")
setwd("~/Personal/Mathematical_statistics")
spruce = read.csv("Data/Spruce.csv")
head(spruce)
Ht.change = spruce[,c("Ht.change")]
hist(Ht.change)
qqnorm(Ht.change,distribution = t)
t.test(Ht.change,conf.level = 0.95)$conf
Ht.change_F = subset(spruce, select = Ht.change, Fertilizer == "F", drop = T )
Ht.change_NF = subset(spruce, select = Ht.change, Fertilizer == "NF", drop = T )
t.test(Ht.change_F,Ht.change_NF, alt= "greater")$conf
head(spruce)
hist(Ht.change_F)
hist(Ht.change_NF)
Girls_2004 = read.csv("Data/Girls2004.csv")
head(Girls_2004)
head(Girls_2004)
unique(Girls_2004[,c("State")])
girls_WY = subset(Girls_2004, select = Weight, State == "WY", drop = T )
girls_AK = subset(Girls_2004, select = Weight, State == "NF", drop = T )
t.test(girls_WY,girls_AK)$conf
t.test(girls_WY,girls_AK)$conf
girls_WY
girls_AK
Girls_2004 = read.csv("Data/Girls2004.csv")
head(Girls_2004)
girls_WY = subset(Girls_2004, select = Weight, State == "WY", drop = T )
girls_AK = subset(Girls_2004, select = Weight, State == "AK", drop = T )
t.test(girls_WY,girls_AK)$conf
c = [60.3,62.0]
c = (60.3,62.0)
data =  c(60.3 , 62.0)
data =  c(60.3 , 62.0, 65.0, 54.7, 65.6, 66.5, 60.7, 53.2, 68.7, 63.2, 72.9, 85.5)
hist(data)
qqnorm(data)
qqline(data)
qqnorm(data, distribution = t)
qqline(data)
t.test(data, conf.level = 0.95)$conf
data <- data[-which(data==85.5)]
data
t.test(data, conf.level = 0.95)$conf
x <- seq(-4, 4, length=100)
lines(x, dt(x,3, lwd=2, col="red")
x <- seq(-4, 4, length=100)
plot()
lines(x, dt(x,3, lwd=2, col="red")
x <- seq(-4, 4, length=100)
plot(x,x)
lines(x, dt(x,3, lwd=2, col="red")
2
sd (c(1,1))
n = 1000
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec =  sqrt(n)*(x - mu)/sd(x)
hist(x_t_vec)
n = 100000
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec =  sqrt(n)*(x - mu)/sd(x)
hist(x_t_vec)
n = 100000000
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec =  sqrt(n)*(x - mu)/sd(x)
hist(x_t_vec)
n = 100000
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec =  sqrt(n)*(x - mu)/sd(x)
hist(x_t_vec)
mean(x)
n = 1000000
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec =  sqrt(n)*(x - mu)/sd(x)
hist(x_t_vec)
N = 10000
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 100
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
for (i in 1:N)
{
n = 1000
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
N = 10
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 100000
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
N = 100
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 100000
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
N = 10000
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 1000
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
N = 10000
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 10
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
N = 10000
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 100
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
t_x <- seq(-4, 4, length=N)
t_x <- seq(-4, 4, length=N)
lines(x, dt(t_x,n-1), lwd=2, col='red')
t_x <- seq(-4, 4, length=N)
lines(t_x, dt(t_x,n-1), lwd=2, col='red')
t_x <- seq(-4, 4, length=N)
lines(t_x, dt(t_x,N-1), lwd=2, col='red')
N = 10000
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 100
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
N = 10000
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 100
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
t_x <- seq(-4, 4, length=N)
curve(dt(t_X),from = -4 ,to = +4)
x <- seq(-4, 4, length=N)
curve(dt(x),from = -4 ,to = +4)
curve(dt(x,df =99),from = -4 ,to = +4)
N = 10000
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 100
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
x <- seq(-4, 4, length=N)
#lines(t_x, dt(t_x,n-1), lwd=2, col='red')
curve(dt(x,df =99),from = -4 ,to = +4)
N = 10000
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 100
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
x <- seq(-4, 4, length=N)
curve(dt(x,df =99),from = -4 ,to = +4)
N = 10000
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 100
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
t_x <- seq(-4, 4, length=N)
lines(t_x, dt(t_x,df= n-1), lwd=2, col='red')
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 100
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec)
x <- seq(-4, 4, length=N)
#lines(t_x, dt(t_x,df= n-1), lwd=2, col='red')
curve(dt(x,df =99),from = -4 ,to = +4)
hist(x_t_vec)
lines(t_x, dnorm(t_x), lwd=2, col='red')
N = 10000
par(mfrow=c(1,1))
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
{
n = 100
shape = 5
rate = 2
x = rgamma(n , shape = shape, rate = 2)
mu = shape/rate
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec,freq = FALSE)
t_x <- seq(-4, 4, length=N)
lines(t_x, dnorm(t_x), lwd=2, col='red')
par(mfrow=c(1,1))
x_t_vec = numeric(N)
# Exercise 17
for (i in 1:N)
# plotting a gamma distribution
{
n = 100
lambda = 2
x = rpois(n , lambda = lambda)
mu = lambda
x_t_vec[i] =  sqrt(n)*(mean(x) - mu)/sd(x)
}
hist(x_t_vec,freq = FALSE)
t_x <- seq(-4, 4, length=N)
lines(t_x, dnorm(t_x), lwd=2, col='red')
qt(0.75, df = n-1)
n = 500
mu = 5.29
sigma = 3.52
q = qt(0.75, df = n-1)
mu + q * sigma/(sqrt(n))
mu - q * sigma/(sqrt(n))
q = qt(0.75, df = n-1)
pt(5.183745, df =99)
pt(5.183745, df = 4999)
pt(5.183745, df = 499)
qt(0.75, df = n-1)
q = qt(0.875, df = n-1)
mu - q * sigma/(sqrt(n))
n = 500
mu = 5.29
sigma = 3.52
q = qt(0.75, df = n-1)
mu - q * sigma/(sqrt(n))
n = 500
mu = 5.29
sigma = 3.52
q = qt(0.75, df = n-1)
mu - q * sigma/(sqrt(n-1))
n = 500
mu = 5.29
sigma = 3.52/sqrt(n-1)
q = qt(0.75, df = n-1)
mu - q * sigma/(sqrt(n))
n = 500
mu = 5.29
sigma = 3.52/sqrt(n)
q = qt(0.75, df = n-1)
mu - q * sigma/(sqrt(n))
# Exercise 19
n = 500
mu = 5.29
sigma = 3.52
q = qt(0.75, df = n-1)
mu - q * sigma/(sqrt(n))
# Exercise 19
n = 500
mu = 5.29
sigma = 3.52
q = qt(0.75, df = n-1)
mu - q * sigma/(sqrt(n-1))
# Exercise 19
n = 500
mu = 5.29
sigma = 3.52
q = qt(0.70, df = n-1)
mu - q * sigma/(sqrt(n-1))
# Exercise 19
n = 500
mu = 5.29
sigma = 3.52
q = qt(0.80, df = n-1)
mu - q * sigma/(sqrt(n-1))
# Exercise 19
n = 500
mu = 5.29
sigma = 3.52
q = qt(0.85, df = n-1)
mu - q * sigma/(sqrt(n-1))
n = 500
mu = 5.29
sigma = 3.52
q = qt(0.82, df = n-1)
mu - q * sigma/(sqrt(n-1))
# Exercise 19
n = 500
mu = 5.29
sigma = 3.52
q = qt(0.75, df = n-1)
mu - 2*q * sigma/(sqrt(n-1))
